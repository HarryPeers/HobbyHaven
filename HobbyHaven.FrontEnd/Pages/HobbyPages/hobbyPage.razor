@page "/hobby"
@attribute [Authorize]
@layout MainLayout

@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject URIservice URIservice
@inject AuthenticationStateProvider AuthenticationStateProvider

@using HobbyHaven.Shared.DTOs.Hobbies


<MudGrid>
    <MudItem xs="2">
        <MudPaper Square="true" Class="pa-16 ma-2">image</MudPaper>
    </MudItem>
    <MudItem xs="10">
        <MudPaper>
            <MudGrid Justify="Justify.FlexEnd">
                <MudItem xs="12">
                    <MudText Typo="Typo.h1" Color="Color.Warning">@hobby.Name</MudText>
                </MudItem>
                <MudItem xs="3">
                    <MudButton EndIcon="@buttonIcon" Color="@buttonColour" FullWidth="true" Variant="Variant.Outlined" OnClick="((e)=> changeSubscribeState())">
                        @buttonText
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper>
            <MudText Typo="Typo.h6"> @hobby.Description </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [Parameter]
    public string hobbyName { get; set; } = "hobby";

    DTOHobby? hobby = new()
    {
        Name = "",
        Description = ""
    };
    bool hobbySubscribed;
    string buttonText, buttonIcon;
    Color buttonColour;

    
    protected override async Task OnInitializedAsync()
    {

        var url = NavManager.ToAbsoluteUri(NavManager.Uri);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        if ((QueryHelpers.ParseQuery(url.Query).TryGetValue("hobby", out var _hobby)))
        {

            HttpResponseMessage response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/hobbies/{_hobby}/view");
            if (!response.IsSuccessStatusCode) 
            {   
                Snackbar.Add("Hobby does not exsist, try again with valid hobbyID", Severity.Error);
                NavManager.NavigateTo("/search-hobbies");
            }
            hobby = await response.Content.ReadFromJsonAsync<DTOHobby>();
            hobbySubscribed = await subscribeState(_hobby);
        }
        else 
        {
            Snackbar.Add("No hobbyID provided, try again with valid hobbyID", Severity.Error);
            NavManager.NavigateTo("/search-hobbies");
        }
        buttonColour = hobbySubscribed ? Color.Error : Color.Success;
        buttonIcon = hobbySubscribed ? Icons.Material.Filled.Block : Icons.Material.Filled.Check;
        buttonText = hobbySubscribed ? "Unsubscribe" : "Subscribe";
    }

    public async Task<bool> subscribeState(string hobbyId)
    {
        // api/users/profile/hobbies/subscribeCheck/{hobbyID}
        var response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/subscribeCheck/{hobbyId}");
        var toConvert = await response.Content.ReadAsStringAsync();

        return Boolean.Parse(toConvert);
    }

    public async Task changeSubscribeState()
    {
        // "api/users/profile/hobbies/{hobbyID}/remove"
        // "api/users/profile/hobbies/{hobbyID}/add"
        string method = (hobbySubscribed) ? "remove" : "add";
        string hobbyID = hobby.Id.ToString();

        var response = await HttpClient.GetAsync($"{URIservice.APIaddress}api/users/profile/hobbies/{hobbyID}/{method}");
        if (response.IsSuccessStatusCode)
        {
            hobbySubscribed = !hobbySubscribed;
            buttonColour = hobbySubscribed ? Color.Error : Color.Success;
            buttonIcon = hobbySubscribed ? Icons.Material.Filled.Block : Icons.Material.Filled.Check;
            buttonText = hobbySubscribed ? "Unsubscribe" : "Subscribe";
        }
    }
}
