@page "/sign-up"
@layout EmptyLayout
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory



<MudText Typo="Typo.h1" Color="Color.Warning" Align="Align.Center">Hobby Haven</MudText>
<MudGrid Justify="Justify.Center">
    <MudItem xs="6" sm="4" >
        <MudCard Class="pa-4">
            <MudText Typo="Typo.h5" Align="Align.Left">Sign up here!</MudText>
            <MudForm @ref="form">
                <MudTextField T="string" Label="Username" Variant="Variant.Outlined" @bind-Value="username"
                              Required="true" RequiredError="Username must be entered!" />

                <MudTextField T="string" Label="Email" Variant="Variant.Outlined" @bind-Value="email"
                              Adornment="Adornment.End" AdornmentIcon="@validEmailIcon" AdornmentColor="@validEmailColor"
                              Required="true" RequiredError="Email must be entered!"/>
                @if (email != null) checkEmailValid(email);

                <MudTextField T="string" Label="Password" Variant="Variant.Outlined" @bind-Value="password" InputType="@passInputType"
                              Required="true" RequiredError="Password must be entered! " />
                @if (password != null) CheckPasswordStrength(password); 
                @if (!passwordStrong) 
                {
                    @foreach (var error in ErrorList) 
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error">@error</MudText>
                    }
                }
      
                <MudTextField T="string" Label="Enter password again" Variant="Variant.Outlined" @bind-Value="passwordCheck"
                              Adornment="Adornment.End" AdornmentIcon="@sameCheckIcon" AdornmentColor="@sameIconColor"
                              InputType="InputType.Password" Required="true" RequiredError="Password must be replicated! "/>
                @if (passwordCheck != null) CheckPasswordSame(); 

                @if (validEmail && passwordsMatch && passwordStrong && password != null && username != null)
                {
                    signupUnavailable = false;
                }
                else signupUnavailable = true;
                <MudButton Disabled=@signupUnavailable OnClick="(async() => {await createUserAndLogin(); })" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary"> Create account </MudButton>
            </MudForm>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    // Adornment="Adornment.End" AdornmentIcon="@passVisIcon" OnAdornmentClick="showPassword" AdornmentAriaLabel="Show Password"
    string? username, password, email, passwordCheck;
    string passVisIcon = Icons.Material.Filled.VisibilityOff;
    string sameCheckIcon, validEmailIcon = Icons.Material.Filled.Clear;
    bool passwordsMatch, isShow, validEmail = false;
    bool passwordStrong, signupUnavailable = true;
    Color sameIconColor, validEmailColor = Color.Error;
    InputType passInputType = InputType.Password;
    MudForm? form;
    List<string> ErrorList = new();



    private void checkEmailValid(string email)
    {
        if (email.Contains("@") && Regex.IsMatch(email[0].ToString(), @"^[a-zA-Z0-9_]+$"))
        {
            int index = email.IndexOf("@");
            try
            {
                if (Regex.IsMatch(email[index + 1].ToString(), @"^[a-zA-Z0-9]+$") && (email.EndsWith(".com") || email.EndsWith(".co.uk") || email.EndsWith(".gov") || email.EndsWith(".net") || email.EndsWith(".org")))
                {
                    validEmail = true;
                    validEmailIcon = Icons.Material.Filled.Check;
                    validEmailColor = Color.Success;
                }
                else changeEmailIcon();
            }
            catch (IndexOutOfRangeException)
            {
                changeEmailIcon();
            }
        }
        else changeEmailIcon();
    }

    private void changeEmailIcon()
    {
        validEmail = false;
        validEmailIcon = Icons.Material.Filled.Clear;
        validEmailColor = Color.Error;

    }

    private void CheckPasswordSame()
    {

        if (password == passwordCheck)
        {
            passwordsMatch = true;   
            sameIconColor = Color.Success;
            sameCheckIcon = Icons.Material.Filled.Check;
        }
        else if (password != passwordCheck)
        {
            passwordsMatch = false;
            sameIconColor = Color.Error;
            sameCheckIcon = Icons.Material.Filled.Clear;
        }
    }

    private void CheckPasswordStrength(string password)
    {
        ErrorList.Clear();
        if (password.Length < 8 || !Regex.IsMatch(password, @"[A-Z]") || !Regex.IsMatch(password, @"[a-z]") || !Regex.IsMatch(password, @"[0-9]"))
        {
            passwordStrong = false;
            if (password.Length < 8)  ErrorList.Add("Password must be at least of length 8");
            if (!Regex.IsMatch(password, @"[A-Z]"))  ErrorList.Add("Password must contain at least one capital letter"); 
            if (!Regex.IsMatch(password, @"[a-z]"))  ErrorList.Add("Password must contain at least one lowercase letter"); 
            if (!Regex.IsMatch(password, @"[0-9]"))  ErrorList.Add("Password must contain at least one digit"); 
        }
        else { passwordStrong = true;  }
    }

    private void showPassword()
    {
        if (isShow)
        {
            isShow = false;
            passVisIcon = Icons.Material.Filled.VisibilityOff;
            passInputType = InputType.Password;
        }
        else 
        {
            isShow = true;
            passVisIcon = Icons.Material.Filled.Visibility;
            passInputType = InputType.Text;
        }
    }

    public async Task createUserAndLogin()
    {
        // /api/user HTTPpost  
        string url = "https://localhost:44357/api/user/";

        IEnumerable<KeyValuePair<string, string>> payload = new[]
            {
                new KeyValuePair<string, string>("Username", username),
                new KeyValuePair<string, string>("Email", email),
                new KeyValuePair<string, string>("Password", password)
            };

        var formContent = new FormUrlEncodedContent(payload);

        var client = ClientFactory.CreateClient();
        var response = await client.PostAsync(url, formContent);
        if (response.IsSuccessStatusCode) NavigationManager.NavigateTo("/log-in");
        else Snackbar.Add("Account already exsists!", Severity.Error);
    }
}
